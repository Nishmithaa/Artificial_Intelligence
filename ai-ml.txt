from collections import defaultdict
jug1,jug2,aim=4,3,2

visited = defaultdict(lambda:False)
def waterJugSolver(amt1,amt2):
    if(amt1==aim and amt2==0) or (amt1==0 and amt2==aim):
      print(amt1,amt2)
      return True
    if visited[(amt1,amt2)]==False:
      print(amt1,amt2)

      visited[(amt1,amt2)]=True
      return (waterJugSolver(0,amt2) or
             waterJugSolver(amt1,0) or
             waterJugSolver(amt1,jug2)or
             waterJugSolver(amt1 + min(amt2,(jug1-amt1)),
                            amt2-min(amt2,(jug1-amt1))) or 
             WaterJugSolver(amt1-min(amt1,(jug2-amt2)),
                            amt2+min(amt1,(jug2-amt2))))
    else:
        return False
                     
print("steps")
waterJugSolver(0,0)





def TowerOfHanoi(n,source,destination,auxiliary):
   if n==1:
          print("move disk from",source,"to the ",destination)
          return

   TowerOfHanoi(n-1,source,auxiliary,destination )
   print("move disk",n,"from source",source,"to dest",destination)

   TowerOfHanoi(n-1,auxiliary,destination,source)
n=4
TowerOfHanoi(n,'A','B','C')





graph = {
       '1':['2','10'],
       '2':['3','8'],
       '3':['4'],
       '4':['5','6','7'],
       '5':[],
       '6':[],
       '7':[],
       '8':['9'],
       '9':[],
       '10':[]
}
visited=[]
queue=[]

def bfs(visited,graph,node):
    visited.append(node)
    queue.append(node)

    while queue:
      m=queue.pop(0)

      for neighbour in graph[m]:
          if neighbour not in visited:
               visited.append(neighbour)
               queue.append(neighbour)
               print("visited nodes are",visited)
print("following bfs are")
bfs(visited,graph,'1')






graph={
    '1':['2','10'],
       '2':['3','8'],
       '3':['4'],
       '4':['5','6','7'],
       '5':[],
       '6':[],
       '7':[],
       '8':['9'],
       '9':[],
       '10':[]
}
visited=set()
def dfs(visited,graph,node):
    if node not in visited:
      print(node)
      visited.add(node)
      print(graph[node])
      for neighbour  in graph[node]:
        dfs(visited,graph,neighbour)
print("following dfs")
dfs(visited,graph,'1')





import csv
with open('ws.csv') as csv_file :
  readcsv=csv.reader(csv_file,delimiter=',')
  data=[]

  print("the examples are")
  for row in readcsv:
         print(row)
         if row[len(row)-1]=='Yes':
           data.append(row)
     
     
print("positive examples")
for x in data:
  print(x)

TotalExamples=len(data)
TotalExamples

i=0
hypo=[]
d=len(data[0])-1
for j in range(d):
 hypo.append(data[i][j])
hypo


for i in range(TotalExamples):
  for k in range(d):
    if hypo[k]!=data[i][k]:
       hypo[k]='?'
    else:
       hypo[k]
hypo





from sys import maxsize
from itertools import permutations
V=4

def TravellingSalesMan(graph,s):
  vertex=[]
  for i in range(V):
    if i!=s:
      vertex.append(i)

    minpath=maxsize
    next_permutation=permutations(vertex)

    for i in next_permutation:
        current_pathweight=0
        k=s

        for j in i:
             current_pathweight+=graph[k][j]
             k=j
        current_pathweight+=graph[k][s]

        minpath=min(minpath,current_pathweight)
  return minpath
if __name__=="__main__":
     graph = [[0,10,15,20],          
             [10,0,35,25],
             [15,35,0,30],
             [20,25,30,0]]
s=0
print(TravellingSalesMan(graph,s))




from queue import PriorityQueue
import matplotlib.pyplot as plt
import networkx as nx

def best_first_search(source,target,n):
    visited=[0]*n
    visited[source]=True

    pq=PriorityQueue()
    pq.add((0,source))
    while pq.empty==False:
      u=pq.get()[1]
      print(u,end="")

      if u==target :
        break
      for v,c in graph[u]:
        if visited[v]==False:
          visited[v]=True
          pq.put((c,v))

    print()

def addedge(x,y,cost) :
    graph[x].append((y,cost))
    graph[y].append((x,cost))
  

v=int(input("Enter the nmber of nodes"))
graph=[[]for i in range(v)]
e=int(input("Enter the number of edges"))

print("enter the edges along with thier  weights")
for i in range(e):
   x,y,z=list(map(int,input().split()))
   addedge(x,y,z)

source=int(input("Enter the source node"))
target=int(input("Enter the target node"))

print("\n path",end="")
best_first_search(source,target,v)